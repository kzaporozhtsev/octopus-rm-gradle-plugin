plugins {
    id 'maven-publish'
    id 'signing'
    id("io.github.gradle-nexus.publish-plugin")
    id 'groovy'
    id 'java-gradle-plugin'
    id 'com.jfrog.artifactory'
}

version = project.findProperty('buildVersion') ?: System.getenv("BUILD_VERSION") ?: '1.0-SNAPSHOT'
group = 'org.octopusden.release-management'

description "Release management gradle plugin ${version}"

ext {
    m2localPath = project.hasProperty('m2_local') ? new File(m2_local).toURI().toURL().toString().replaceAll(/^file:\//, 'file:///') : null
    escrowBuild = m2localPath != null
}

dependencies {
    api group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: project['jfrog-artifactory.version']
    api group: 'org.apache.httpcomponents', name: 'httpclient', version: project['httpclient.version']
    api platform("com.fasterxml.jackson:jackson-bom:${project['jackson.version']}")
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    api group: 'com.platformlib.gradle-wrapper', name: 'platformlib-gradle-wrapper-plugin', version: project['com.platformlib.gradle-wrapper.version']
}

gradlePlugin {
    plugins {
        ReleaseManagementGradlePlugin {
            id = 'org.octopusden.release-management'
            implementationClass = 'org.octopusden.release.management.plugins.gradle.ReleaseManagementGradlePlugin'
        }
        StagingGradlePlugin {
            id = 'gradle-staging-plugin'
            implementationClass = 'org.octopusden.release.management.plugins.gradle.ReleaseManagementGradlePlugin'
        }
    }
}

def resourceDir = "${buildDir}/generated/resources"

sourceSets {
  main {
    java { srcDirs = [] }    // no source dirs for the java compiler
    groovy { srcDirs = ["src/main/groovy", "src/main/java"] }  // compile   everything in src/ with groovy
    resources {
        srcDirs += [resourceDir]
    }
  }
}

java {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}
//
//Publishing section
//

task exportDependenciesToTeamcity

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(System.getenv("MAVEN_USERNAME"))
            password.set(System.getenv("MAVEN_PASSWORD"))
        }
    }
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            pom {
                name.set(project.name)
                description.set("Octopus module for testing Maven release workflow")
                url.set("https://github.com/kzaporozhtsev/octopus-maven-test.git")
                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                scm {
                    url.set("https://github.com/kzaporozhtsev/octopus-maven-test.git")
                    connection.set("scm:git://github.com/kzaporozhtsev/octopus-maven-test.git")
                }
                developers {
                    developer {
                        id.set("octopus")
                        name.set("octopus")
                    }
                }
            }
        }
    }
}

if (!project.version.toString().endsWith("SNAPSHOT", true)) {
    signing {
        sign(publishing.publications["mavenJava"])
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(
                signingKey,
                signingPassword
        )
    }
}

//END Publishing section

if (!escrowBuild) {
    project.tasks.findByPath("publish")?.dependsOn(":artifactoryPublish")
}

def supportedGroupIds = project.hasProperty("supportedGroupIds") ? project.property("supportedGroupIds").toString().replace('"', '') : ""

task prepareConfiguration(type : DefaultTask) {
    doFirst {
        def targetDir = mkdir(resourceDir)
        println "Target dir was created in ${targetDir}"
        def configFile = file("$resourceDir/configuration.properties")
        configFile.write("supportedGroupIds=$supportedGroupIds", "UTF-8")
        println "File was generated in ${configFile.absoluteFile}"

        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Resources directories: "+srcSet.resources.files+"\n"
            println ""
        }
    }
}

compileJava.dependsOn(prepareConfiguration)

clean {
    delete("$resourceDir/configuration.properties")
}

task openStagingRepository
task closeStagingRepository
